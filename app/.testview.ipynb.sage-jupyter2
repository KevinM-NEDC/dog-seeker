{"backend_state":"init","connection_file":"/projects/375a9615-5617-48b6-a132-fe9d08f3c36b/.local/share/jupyter/runtime/kernel-53e6891e-9436-4415-beb9-9f2acfb8a07b.json","kernel":"cv_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0ad531","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5ec764","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"88b27d","input":"list_of_vowls = ['a','e','u', 'i', 'o', 'A']\ndef if_sentence_starts_with_vowl(sentence):\n    first_word = sentence[0]\n    if first_word in list_of_vowels","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"805613","input":"save_dir","output":{"0":{"data":{"text/plain":"'/projects/375a9615-5617-48b6-a132-fe9d08f3c36b/somethingmoreinformationalaboutwhatitis/app/static/uploads'"},"exec_count":15,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"dbe2b9","input":"results.save(save_dir=save_dir)","output":{"0":{"name":"stderr","output_type":"stream","text":"Saved 1 image to \u001b[1m/projects/375a9615-5617-48b6-a132-fe9d08f3c36b/somethingmoreinformationalaboutwhatitis/app/static/uploads\u001b[0m\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"30e8c6","input":"results","output":{"0":{"data":{"text/plain":"<models.common.Detections at 0x7f7b7d173250>"},"exec_count":17,"output_type":"execute_result"}},"pos":17,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"730cc6","input":"here = os.getcwd()","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"c9621c","input":"save_dir = os.path.join(here, 'static/uploads')","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"b9bdd0","input":"dic = {['a','b']:'here'}","output":{"0":{"ename":"TypeError","evalue":"unhashable type: 'list'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [2]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m dic \u001b[38;5;241m=\u001b[39m {[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m'\u001b[39m]:\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mhere\u001b[39m\u001b[38;5;124m'\u001b[39m}\n","\u001b[0;31mTypeError\u001b[0m: unhashable type: 'list'"]}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"4e37ef","input":"def loop_dictionary(dictionary, labels, key):\n    resultList = []\n    for label in labels:\n        resultList.append(dictionary[label][key])\n        print(dictionary[label][key])\n    return resultList\ndictio = {\n    \"dog\":\n    {\n        \"personality\":\"angry\",\n    },\n    \"cat\":\n    {\n        \"personality\":\"angry\",\n    },\n}\nlabels = [\"dog\", \"cat\"]\nlis = loop_dictionary(dictio, labels, \"personality\")\nprint(lis)","output":{"0":{"name":"stdout","output_type":"stream","text":"angry\nangry\n['angry', 'angry']\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"4cea0e","input":"print(list)","output":{"0":{"name":"stdout","output_type":"stream","text":"['a', 'Inu', 'and', 'Akita', 'Inu']\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"b1c7d7","input":"list()","output":{"0":{"ename":"TypeError","evalue":"'list' object is not callable","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [32]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mTypeError\u001b[0m: 'list' object is not callable"]}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"51d3c7","input":"import torch\nimport os\nimport cv2\nimport os\nimport matplotlib.pyplot as plt\nimport json\nimport pandas as pd\nimport os\nimport torch\nmodel = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path = 'best4.pt', force_reload=True)\nUPLOAD_FOLDER = 'static/uploads'","output":{"0":{"name":"stderr","output_type":"stream","text":"Downloading: \"https://github.com/ultralytics/yolov5/archive/master.zip\" to /projects/375a9615-5617-48b6-a132-fe9d08f3c36b/.cache/torch/hub/master.zip\n"},"1":{"name":"stderr","output_type":"stream","text":"YOLOv5 ðŸš€ 2022-7-14 Python-3.8.13 torch-1.11.0+cu102 CPU\n\n"},"2":{"name":"stderr","output_type":"stream","text":"Fusing layers... \n"},"3":{"name":"stderr","output_type":"stream","text":"Model summary: 213 layers, 7045186 parameters, 0 gradients, 15.9 GFLOPs\n"},"4":{"name":"stderr","output_type":"stream","text":"Adding AutoShape... \n"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"7f3cd3","input":"results = model(\"/projects/375a9615-5617-48b6-a132-fe9d08f3c36b/somethingmoreinformationalaboutwhatitis/app/static/images/akita6.jpg\", size=416)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"ad6d89","input":"def and_syntax(alist):\n    if len(alist) == 1:\n        alist = \"\".join(alist)\n        return alist\n    elif len(alist) == 2:\n        alist = \" and \".join(alist)\n        return alist\n    elif len(alist) > 2:\n        alist[-1] = \"and \" + alist[-1]\n        alist = \", \".join(alist)\n        return alist\n    else:\n        return\nconfidences = list(results.pandas().xyxy[0]['confidence'])\n# confidences: rounding and changing to percent, putting in function\nformat_confidences = []\nfor percent in confidences:\n    format_confidences.append(str(round(percent*100)) + '%')\nformat_confidences = and_syntax(format_confidences)\n\nlabels = list(results.pandas().xyxy[0]['name'])\n#checks repeats\nlabel_reps=[]\nfor i in labels:\n    if i not in label_reps:\n        label_reps.append(i)\n\nlabels = label_reps\n\nfor i in range(len(labels)): #renames to proper names\n    if labels[i] == 'Shibu Inu':\n        labels[i] = 'Shiba Inu'\n    elif labels[i] == \"Akita\":\n        labels[i] = \"Akita Inu\"\ndog_Names= labels\n\n\n\n#dog_Info= dummy_json[dog_Names]['Personality']\n#dog_desc= dummy_json[dog_Names]['Description']\n\nlabels = and_syntax(labels)\nlist_1=labels.split()\nlist_1[0]='a'\nlabels=\"\".join(labels)\n\nlist_of_vowls = ['a','e','u', 'i', 'o']\nif any(x in list_of_vowls for x in list(labels[0])):\n    a_an= 'an'\nelse:\n    a_an = 'a'\n# labels: sorting and capitalizing, putting into function\nprint(labels)\nprint(a_an)","output":{"0":{"ename":"TypeError","evalue":"'list' object is not callable","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [35]\u001b[0m, in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     13\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[0;32m---> 14\u001b[0m confidences \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mresults\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpandas\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxyxy\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mconfidence\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# confidences: rounding and changing to percent, putting in function\u001b[39;00m\n\u001b[1;32m     16\u001b[0m format_confidences \u001b[38;5;241m=\u001b[39m []\n","\u001b[0;31mTypeError\u001b[0m: 'list' object is not callable"]}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"bc0a46","input":"dic = {'alex':'here','kevin':'not here'}\ndic['kevin']","output":{"0":{"data":{"text/plain":"'not here'"},"exec_count":38,"output_type":"execute_result"}},"pos":4,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"ee39dd","input":"dummy_json = pd.read_json('File-1.json').to_dict()\ndummy_json[dog_Name]['Personality']","output":{"0":{"data":{"text/plain":"'sad'"},"exec_count":40,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"9736fb","input":"\n\nfrom werkzeug.utils import secure_filename\nfrom url_utils import get_base_url\nimport os\nimport torch\nimport json\nimport pandas as pd","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"0e9945","input":"","output":{"0":{"ename":"NameError","evalue":"name 'and_syntax' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [62]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m labels \u001b[38;5;241m=\u001b[39m (results\u001b[38;5;241m.\u001b[39mpandas()\u001b[38;5;241m.\u001b[39mxyxy[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalues[\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m      2\u001b[0m labels \u001b[38;5;241m=\u001b[39m [emotion\u001b[38;5;241m.\u001b[39mcapitalize() \u001b[38;5;28;01mfor\u001b[39;00m emotion \u001b[38;5;129;01min\u001b[39;00m labels]\n\u001b[0;32m----> 3\u001b[0m labels \u001b[38;5;241m=\u001b[39m \u001b[43mand_syntax\u001b[49m(labels)\n","\u001b[0;31mNameError\u001b[0m: name 'and_syntax' is not defined"]}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"dff491","input":"(results.pandas().xyxy[0]['name']).values[0] #need to grab the name key, not actual dog name\ndog_Name= (results.pandas().xyxy[0]['name']).values\ndog_Name[0]\ndog_Name_No_Reps=[]\nfor i in dog_Name:\n    if i not in dog_Name_No_Reps:\n        dog_Name_No_Reps.append(i)\n\ndog_Name = dog_Name_No_Reps        \n\n'''\ndog_Info_list = []\nfor i in dog_Name\n'''","output":{"0":{"data":{"text/plain":"'Shibu Inu'"},"exec_count":67,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"id":0,"time":1657819100931,"type":"user"}
{"last_load":1657831881891,"type":"file"}